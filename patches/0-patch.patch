diff --git a/build.sh b/build.sh
index 1d57a30..ccdcacf 100755
--- a/build.sh
+++ b/build.sh
@@ -67,7 +67,7 @@ export DEVTOOLSET_ROOTPATH
 export PREPEND_PATH
 export LD_LIBRARY_PATH_ARG
 
-MANYLINUX_IMAGE="quay.io/pypa/${POLICY}_${PLATFORM}:${COMMIT_SHA}"
+MANYLINUX_IMAGE="ghcr.io/karellen/${POLICY}_${PLATFORM}:${COMMIT_SHA}"
 
 BUILD_ARGS_COMMON=(
 	"--platform=linux/${GOARCH}"
diff --git a/deploy.sh b/deploy.sh
index deea740..96c4406 100755
--- a/deploy.sh
+++ b/deploy.sh
@@ -11,7 +11,7 @@ fi
 
 set -x
 
-TAG="quay.io/pypa/${POLICY}_${PLATFORM}"
+TAG="ghcr.io/karellen/${POLICY}_${PLATFORM}"
 COMMIT_ABBREV_SHA=$(git show -s --format=%h "${COMMIT_SHA}")
 COMMIT_DATE=$(git show -s --format=%cd --date=short "${COMMIT_SHA}")
 BUILD_ID=${COMMIT_DATE}-${COMMIT_ABBREV_SHA}
@@ -30,7 +30,7 @@ docker tag "${TAG}:${COMMIT_SHA}" "${TAG}:latest"
 set +x
 
 if [ $DRY_RUN -eq 0 ]; then
-  docker login -u "${QUAY_USERNAME}" -p "${QUAY_PASSWORD}" quay.io
+  docker login -u $ -p "$GITHUB_TOKEN" ghcr.io
   docker push "${TAG}:${BUILD_ID}"
   docker push "${TAG}:${BUILD_ID2}"
   docker push "${TAG}:latest"
diff --git a/docker/build_scripts/finalize-one.sh b/docker/build_scripts/finalize-one.sh
index 4673bab..dbaee3c 100755
--- a/docker/build_scripts/finalize-one.sh
+++ b/docker/build_scripts/finalize-one.sh
@@ -16,6 +16,9 @@ fi
 PY_VER=$("${PREFIX}/bin/python" -c "import sys; print('.'.join(str(v) for v in sys.version_info[:2]))")
 PY_IMPL=$("${PREFIX}/bin/python" -c "import sys; print(sys.implementation.name)")
 PY_GIL=$("${PREFIX}/bin/python" -c "import sysconfig; print('t' if sysconfig.get_config_vars().get('Py_GIL_DISABLED', 0) else '')")
+if [[ "${PREFIX}" == *"-shared"* ]]; then
+	PY_SHARED="-shared"
+fi
 
 # disable some pip warnings
 export PIP_ROOT_USER_ACTION=ignore
@@ -27,9 +30,6 @@ if [ "${PY_IMPL}" == "graalpy" ]; then
 	# GraalPy doesn't update pip/setuptools because it uses a patched version of pip/setuptools
 	"${PREFIX}/bin/python" -m ensurepip --default-pip
 	"${PREFIX}/bin/python" -m pip install -U --require-hashes -r "${MY_DIR}/requirements${PY_VER}.txt"
-elif [ -f "/usr/local/bin/cpython${PY_VER}" ]; then
-	# Use the already installed cpython pip to bootstrap pip if available
-	"/usr/local/bin/cpython${PY_VER}" -m pip --python "${PREFIX}/bin/python" install -U --require-hashes -r "${MY_DIR}/requirements${PY_VER}.txt"
 else
 	"${PREFIX}/bin/python" -m ensurepip
 	"${PREFIX}/bin/python" -m pip install -U --require-hashes -r "${MY_DIR}/requirements${PY_VER}.txt"
@@ -39,15 +39,17 @@ if [ -e "${PREFIX}/bin/pip3" ] && [ ! -e "${PREFIX}/bin/pip" ]; then
 fi
 # Create a symlink to PREFIX using the ABI_TAG in /opt/python/
 ABI_TAG=$("${PREFIX}/bin/python" "${MY_DIR}/python-tag-abi-tag.py")
-ln -s "${PREFIX}" "/opt/python/${ABI_TAG}"
+ln -s "${PREFIX}" "/opt/python/${ABI_TAG}${PY_SHARED:-}"
 
 # Make versioned python commands available directly in environment.
-# Don't use symlinks: c.f. https://github.com/python/cpython/issues/106045
-cat <<EOF > "/usr/local/bin/${PY_IMPL}${PY_VER}${PY_GIL}"
+if [ -z "${PY_SHARED:-}" ]; then
+	# Don't use symlinks: c.f. https://github.com/python/cpython/issues/106045
+	cat <<EOF > /usr/local/bin/${PY_IMPL}${PY_VER}${PY_GIL}
 #!/bin/sh
 exec "/opt/python/${ABI_TAG}/bin/python" "\$@"
 EOF
-chmod +x "/usr/local/bin/${PY_IMPL}${PY_VER}${PY_GIL}"
-if [[ "${PY_IMPL}" == "cpython" ]]; then
+	chmod +x /usr/local/bin/${PY_IMPL}${PY_VER}${PY_GIL}
+fi
+if [ "${PY_IMPL}" == "cpython" -a -z "${PY_SHARED:-}" ]; then
 	ln -s "${PY_IMPL}${PY_VER}${PY_GIL}" "/usr/local/bin/python${PY_VER}${PY_GIL}"
 fi
diff --git a/docker/build_scripts/manylinux-interpreters.py b/docker/build_scripts/manylinux-interpreters.py
index f3b5b52..9a2ce85 100644
--- a/docker/build_scripts/manylinux-interpreters.py
+++ b/docker/build_scripts/manylinux-interpreters.py
@@ -27,7 +27,7 @@ def sort_key(tag):
 
 @cache
 def get_all_tags(no_check: bool = False):
-    all_tags_ = {p.name for p in INSTALL_DIR.iterdir() if p.is_dir()}
+    all_tags_ = {p.name for p in INSTALL_DIR.iterdir() if p.is_dir() and "-shared" not in p.name}
     if POLICY.startswith("manylinux"):
         all_tags_ |= {tag for tag in PYTHON_TAGS if ARCH in PYTHON_TAGS[tag]}
     if no_check:
diff --git a/tests/run_tests.sh b/tests/run_tests.sh
index 39991f7..f602041 100755
--- a/docker/tests/run_tests.sh
+++ b/docker/tests/run_tests.sh
@@ -51,6 +51,9 @@ fi
 
 PYTHON_COUNT=0
 for PYTHON in /opt/python/*/bin/python; do
+	if [[ "$PYTHON" == /opt/python/*-shared*/bin/python ]]; then
+		continue
+	fi
 	# Smoke test to make sure that our Pythons work, and do indeed detect as
 	# being manylinux compatible:
 	$PYTHON "${MY_DIR}/manylinux-check.py" "${AUDITWHEEL_POLICY}" "${AUDITWHEEL_ARCH}"
diff --git a/docker/build_scripts/build-cpython.sh b/docker/build_scripts/build-cpython.sh
index 39e9972..17420f9 100755
--- a/docker/build_scripts/build-cpython.sh
+++ b/docker/build_scripts/build-cpython.sh
@@ -38,11 +38,16 @@ mkdir -p "${PREFIX}/lib"
 CFLAGS_EXTRA=""
 CONFIGURE_ARGS=(--disable-shared --with-ensurepip=no)
 
-if [ "${4:-}" == "nogil" ]; then
+if [ "${4:-}" == "nogil" -o "${5:-}" == "nogil" ]; then
 	PREFIX="${PREFIX}-nogil"
 	CONFIGURE_ARGS+=(--disable-gil)
 fi
 
+if [ "${4:-}" == "shared" -o "${5:-}" == "shared" ]; then
+	PREFIX="${PREFIX}-shared"
+	CONFIGURE_ARGS+=(--enable-shared)
+fi
+
 if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ] ; then
 	# Python 3.11+
 	export TCLTK_LIBS="-ltk8.6 -ltcl8.6"
@@ -87,6 +92,9 @@ make > /dev/null
 make install > /dev/null
 popd
 rm -rf "Python-${CPYTHON_VERSION}" "Python-${CPYTHON_VERSION}.tar.xz" "Python-${CPYTHON_VERSION}.tar.xz.sigstore"
+if [ "${4:-}" == "shared" -o "${5:-}" == "shared" ]; then
+	patchelf --force-rpath --set-rpath '$ORIGIN/../lib' "${PREFIX}/bin/python3"
+fi
 
 if [ "${OPENSSL_PREFIX}" != "" ]; then
 	rm -rf "${OPENSSL_PREFIX:?}/bin" "${OPENSSL_PREFIX}/include" "${OPENSSL_PREFIX}/lib/pkgconfig" "${OPENSSL_PREFIX}/lib/*.so"
@@ -97,3 +105,6 @@ clean_pyc "${PREFIX}"
 
 # Strip ELF files found in ${PREFIX}
 strip_ "${PREFIX}"
+
+# Test that python is functioning
+${PREFIX}/bin/python3 -c "pass"
diff --git a/docker/build_scripts/install-runtime-packages.sh b/docker/build_scripts/install-runtime-packages.sh
index a057bb0..2320f96 100755
--- a/docker/build_scripts/install-runtime-packages.sh
+++ b/docker/build_scripts/install-runtime-packages.sh
@@ -71,7 +71,7 @@ else
 	exit 1
 fi
 
-BASE_TOOLS=(autoconf automake bison bzip2 ca-certificates curl diffutils file make patch unzip)
+BASE_TOOLS=(autoconf automake bison bzip2 ca-certificates curl diffutils file make patch unzip patchelf)
 if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ]; then
 	BASE_TOOLS+=(hardlink hostname which)
 	# See https://unix.stackexchange.com/questions/41784/can-yum-express-a-preference-for-x86-64-over-i386-packages
@@ -109,8 +109,11 @@ if [ "${AUDITWHEEL_POLICY}" == "manylinux2014" ]; then
 		TOOLCHAIN_DEPS+=(yasm)
 	elif [ "${AUDITWHEEL_ARCH}" == "aarch64" ] || [ "${AUDITWHEEL_ARCH}" == "ppc64le" ] || [ "${AUDITWHEEL_ARCH}" == "s390x" ]; then
 		# Software collection (for devtoolset-10)
-		yum -y install centos-release-scl-rh
+		yum -y install centos-release-scl-rh epel-release
 	elif [ "${AUDITWHEEL_ARCH}" == "i686" ]; then
+		# No patchelf in repo
+		curl -Ls https://github.com/NixOS/patchelf/releases/download/0.18.0/patchelf-0.18.0-i686.tar.gz | tar -xzf - -C /usr
+		BASE_TOOLS=( ${BASE_TOOLS[@]/patchelf} )
 		# No yasm on i686
 		# Install mayeut/devtoolset-10 repo to get devtoolset-10
 		curl -fsSLo /etc/yum.repos.d/mayeut-devtoolset-10.repo https://copr.fedorainfracloud.org/coprs/mayeut/devtoolset-10/repo/custom-1/mayeut-devtoolset-10-custom-1.repo
@@ -123,6 +126,9 @@ elif [ "${OS_ID_LIKE}" == "rhel" ]; then
 	EPEL=epel-release
 	if [ "${AUDITWHEEL_ARCH}" == "i686" ]; then
 		EPEL=
+		# No patchelf in repo
+		curl -Ls https://github.com/NixOS/patchelf/releases/download/0.18.0/patchelf-0.18.0-i686.tar.gz | tar -xzf - -C /usr
+		BASE_TOOLS=( ${BASE_TOOLS[@]/patchelf} )
 	fi
 	dnf -y install dnf-plugins-core ${EPEL}
 	if [ "${AUDITWHEEL_POLICY}" == "manylinux_2_28" ]; then
